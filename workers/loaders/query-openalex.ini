append = pack
label = query-openalex
extension = json
mimeType = application/json

# load some plugins to activate some statements
[use]
plugin = conditor
plugin = basics
plugin = analytics

# Toggle ezs traces (see server stderr log)
[debug]
ezs = true

# {{{
[TXTConcat]

[env]
path = url
value = https://api.openalex.org/works

path = query
value = self().trim()

[replace]
path = filter
value = env('query')

path = cursor
value = *

[URLRequest]
timeout = 60000
url = env('url')

[loop]
test = has('meta.next_cursor')

[loop/replace]
path = filter
value = env('query')

path = cursor
value = get('meta.next_cursor')

[loop/URLRequest]
url = env('url')
timeout = 60000

[loop/drop]
path = meta.next_cursor

[exploding]
value = results

[exchange]
value = get('value')

[assign]
path = uri
value = get('id').replace('https://openalex.org/', '')

path = DOI
value = get('doi').replace("https://doi.org/","").toLower()

path = isOA
value = get("primary_location.is_oa")

path = authorName
value = get('authorships').flatMap("raw_author_name")

path = institutions
value = get('authorships').flatMap("raw_affiliation_string")

path = abstract
value = get("abstract_inverted_index").flatMap((values, key) => { return values.map(value => `${key}:${value}`) }).map(item => item.split(":")).map(([first, second]) => [first, parseInt(second, 10)]).map(item => item.reverse()).sort((a, b) => a[0] - b[0]).map(item => item.slice(1)).flatMap().join(' ')

[exchange]
value = omit(["abstract_inverted_index","doi","display_name"])

# }}}

# Ensures that each object contains an identification key (required by lodex)
[swing]
test = pick(['URI', 'uri']).pickBy(_.identity).isEmpty()
[swing/identify]

# Ignore objects with duplicate URI
[dedupe]
ignore = true

# Prevent keys from containing dot path notation (which is forbidden by nodejs mongoDB driver)
[OBJFlatten]
separator = fix('.')
reverse = true
safe = true

# Uncomment to see each data sent to the database
#[debug]

# Add contextual metadata related to the import
[assign]
path = lodexStamp.importedDate
value = fix(new Date()).thru(d => d.toDateString())
path = lodexStamp.usedParser
value = env('parser')
path = lodexStamp.query
value = env('query')
path = uri
value = get('uri').trim()
