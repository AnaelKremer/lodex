append = pack
label = json-conditor

# load some plugins to activate some statements
[use]
plugin = basics

# Toggle ezs traces (see server stderr log)
[debug]
ezs = false

# Parse input file
[unpack]

# champs minimaux
[replace]
path = abstract/default
value = get("abstract.default")

path = sourceUidChain
value = get("sourceUidChain")

path = authors
value = get("authors")

path = doi
value = get("doi")

path = enrichments/openAccess/unpaywall/oaStatus
value = get("enrichments.openAccess.unpaywall.oaStatus")

path = enrichments/openAccess/unpaywall/hasRepositoryCopy
value = get("enrichments.openAccess.unpaywall.hasRepositoryCopy")

path = enrichments/openAccess/unpaywall/isOa
value = get("enrichments.openAccess.unpaywall.isOa")

path = enrichments/openAccess/unpaywall/oaLocations
value = get("enrichments.openAccess.unpaywall.oaLocations")

path = fulltextUrl
value = get("fulltextUrl")

path = halId
value = get("halId")

path = host/issn
value = get("host.issn")

path = host/eissn
value = get("host.eissn")

path = host/isbn
value = get("host.isbn")

path = host/language
value = get("host.language")

path = host/conference/date
value = get("host.conference.date")

path = host/conference/country
value = get("host.conference.country")

path = host/conference/name
value = get("host.conference.name")

path = host/conference/place
value = get("host.conference.place")

path = keywords/en/author
value = get("keywords.en.author")

path = keywords/en/mesh
value = get("keywords.en.mesh")

path = keywords/fr/author
value = get("keywords.fr.author")

path = keywords/fr/mesh
value = get("keywords.fr.mesh")

path = pmId
value = get("pmId")

path = title/default
value = get("title.default")

path = funders
value = get("funders")

# Champs créés dans le dump
path = ApilPublicationDate
value = get("ApilPublicationDate")

path = ApilFinancement
value = get("ApilFinancement")

path = ApilRnsrProvisoire
value = get("ApilRnsr")

path = ApilWsSigleLaboIntitule
value = get("ApilWsSigleLaboIntitule")

path = ApilWsLaboIntituleProvisoire
value = get("ApilWsLaboIntitule").map(item=>_.deburr(String(item))).map(item=>item.replace(/ (\([^\]]+\))/gmi,"")).map(item=>_.toUpper(String(item)))

path = ApilWsInstitutCnrsProvisoire
value = get("ApilWsInstitutCnrs")

path = ApilWsIsCnrs
value = get("ApilWsIsCnrs")

path = ApilWsTypeDoc
value = get("ApilWsTypeDoc")

path = ApilWsSource
value = get("ApilWsSource")

path = ApilWsPublisher
value = get("ApilWsPublisher")

path = ApilWsCodeISO
value = get("ApilWsCodeISO")

path = ApilWsCountry
value = get("ApilWsCountry")

path = ApilOaLocation
value=get("enrichments.openAccess.unpaywall.oaLocations").map("hostType").replace(/^$/,"OA - Non").split(",").concat([self.fulltext].map((value)=>value && value.replace(/.*http.*/,"repository"))).uniq().filter((value, index, collection)=>{if(!(value === "OA - Inconnu" && collection[index+1] === "repository" )){return true}}).compact()

path=ApilVoieDacces
value=get("ApilOaLocation").sort().replace("repository","Archive seule").replace("publisher","Editeur seul").replace("Editeur seul,Archive seule","Commun")

path=ApilOaLocationsHal
value=get("ApilOaLocationsHal").join(",").replace(/^$/,"OA - Non").split(",")

path=ApilOaStatusHal
value=get("ApilOaStatusHal")

path=ApilIsOaHal
value=get("ApilOaStatusHal","OA - Inconnu").replace("Closed","OA - Non").replace(/^((?!OA).)*$/,"OA - Oui")

path=ApilTypeDaccesHal
value=get("ApilOaLocationsHal").sort().replace("repository","Archive seule").replace("publisher","Editeur seul").replace("Editeur seul,Archive seule","Commun").replace(/^$/,"OA - Non")

path=ApilOaStatusDiamond
value=get("ApilOaStatusDiamond").replace("Closed,Green","Green")

path=ApilOaStatusDiamondHal
value=get("ApilOaStatusDiamondHal").replace("Closed,Green","Green")

path=ApilWsDr
value=get("ApilWsDr").flatten().map(item=>item.replace(/^(?!DR).*$/,"")).compact().union()

path = ApilProvenance
value = get("ApilProvenance")

path = ApilCollation
value = get("ApilCollation")

path= WsLoterre
value=get("ws.loterre2xk")

[assign]
path = uri
value = get('sourceUidChain')

; on le transforme en une valeur acceptable par lodex
[map]
path = uri

[map/replace]
path = uri
value = self().replace(/:/g, '=')

[map/identify]
scheme = sha

[map/exchange]
value = get('uri').replace('sha:/', 'uri:/')

[assign]
path = uri
value = get('uri').join('')

[assign]
path=ZipLaboRnsrInstitut
value=zip(self.ApilWsLaboIntituleProvisoire,self.ApilRnsrProvisoire,self.ApilWsInstitutCnrsProvisoire).filter(subArray => !subArray.some(item => item === "200612821P" || item=== "200018571R" || item=== "199812965F" || item=== "201523784S"))

[assign]
path=ApilWsLaboIntitule
value=get("ZipLaboRnsrInstitut").map(subArray => subArray[0])

[assign]
path=ApilRnsr
value=get("ZipLaboRnsrInstitut").map(subArray => subArray[1])

[assign]
path=ApilWsInstitutCnrs
value=get("ZipLaboRnsrInstitut").map(subArray => subArray[2])

[assign]
path=InstitForZip
value=get("ApilWsInstitutCnrs").map(item=>item.split(";"))

[assign]
path=ApilGraphSourceEditeurIsOa
value=get("enrichments.openAccess.unpaywall.isOa").replace(true,"Oui").replace(false,"Non").replace(/^$/,"null").prepend("OA=").append(("; TypeAcces="+self.ApilTypeDaccesHal).replace(/Commun|Editeur seul/g,"Editeur").replace(/OA - Non|Archive seule|OA - Inconnu/g,"null"))

[assign]
path=ApilGraphSourceEditeurIsOaHal
value=get("ApilIsOaHal").replace(/^((?!Oui).)*$/,"null").prepend("OA=").append(("; TypeAcces="+self.ApilTypeDaccesHal).replace(/Commun|Editeur seul/g,"Editeur").replace(/OA - Non|Archive seule|OA - Inconnu/g,"null"))


#[exchange]
#value = omit(['ws'])

# Aplatit la structure, pour avoir le même comportement que le loader
[OBJFlatten]
separator = fix('/')
safe = true

# Ensures that each object contains an identification key (required by lodex)
[swing]
test = pick(['URI', 'uri']).pickBy(_.identity).isEmpty()
[swing/identify]

# Ignore objects with duplicate URI
[dedupe]
ignore = true

# Prevent keys from containing dot path notation (which is forbidden by nodejs mongoDB driver)
[OBJFlatten]
separator = fix('.')
reverse = true
safe = true

# Uncomment to see each data sent to the database
#[debug]

# Add contextual metadata related to the import
[assign]
path = lodexStamp.importedDate
value = fix(new Date()).thru(d => d.toDateString())
path = lodexStamp.usedParser
value = env('parser')
path = lodexStamp.uploadedFilename
value = env('source')
path = uri
value = get('uri').trim()

